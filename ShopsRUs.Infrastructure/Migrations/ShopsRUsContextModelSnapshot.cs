// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShopsRUs.Infrastructure;

namespace ShopsRUs.Infrastructure.Migrations
{
    [DbContext(typeof(ShopsRUsContext))]
    partial class ShopsRUsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("ShopsRUs.Domain.Entity.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastVisited")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalAMountSpent")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("PhoneNumber", "Name")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "kfc road 4",
                            CreatedOn = new DateTime(2018, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mckensie4@gmail.com",
                            LastVisited = new DateTime(2021, 3, 4, 3, 27, 27, 792, DateTimeKind.Local).AddTicks(783),
                            Name = "William 4",
                            PhoneNumber = "08109502104",
                            TotalAMountSpent = 500000m,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 4L
                        },
                        new
                        {
                            Id = 2L,
                            Address = "kfc road 2",
                            CreatedOn = new DateTime(2021, 3, 2, 3, 27, 27, 796, DateTimeKind.Local).AddTicks(2356),
                            Email = "mckensie2@gmail.com",
                            LastVisited = new DateTime(2021, 3, 4, 3, 27, 27, 796, DateTimeKind.Local).AddTicks(2427),
                            Name = "William 2",
                            PhoneNumber = "08109502100",
                            TotalAMountSpent = 500000m,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 2L
                        },
                        new
                        {
                            Id = 3L,
                            Address = "kfc road 5",
                            CreatedOn = new DateTime(2020, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mckensie5@gmail.com",
                            LastVisited = new DateTime(2021, 3, 4, 3, 27, 27, 796, DateTimeKind.Local).AddTicks(2447),
                            Name = "William 5",
                            PhoneNumber = "08109502105",
                            TotalAMountSpent = 500000m,
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserId = 5L
                        });
                });

            modelBuilder.Entity("ShopsRUs.Domain.Entity.Discount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("DiscountType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name", "DiscountType")
                        .IsUnique();

                    b.ToTable("Discounts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CreatedOn = new DateTime(2021, 3, 2, 3, 27, 27, 798, DateTimeKind.Local).AddTicks(5658),
                            DiscountType = "Percentage",
                            Name = "Affiliate",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "10"
                        },
                        new
                        {
                            Id = 2L,
                            CreatedOn = new DateTime(2021, 3, 2, 3, 27, 27, 798, DateTimeKind.Local).AddTicks(6178),
                            DiscountType = "Percentage",
                            Name = "Employee",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "30"
                        },
                        new
                        {
                            Id = 3L,
                            CreatedOn = new DateTime(2021, 3, 2, 3, 27, 27, 798, DateTimeKind.Local).AddTicks(6185),
                            DiscountType = "Flat",
                            Name = "Customer",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "5"
                        },
                        new
                        {
                            Id = 4L,
                            CreatedOn = new DateTime(2021, 3, 2, 3, 27, 27, 798, DateTimeKind.Local).AddTicks(6188),
                            DiscountType = "Flat",
                            Name = "Default",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Value = "5"
                        });
                });

            modelBuilder.Entity("ShopsRUs.Domain.Entity.Invoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<long>("DiscountId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("DiscountedAmount")
                        .HasColumnType("TEXT");

                    b.Property<string>("Item")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalAMountPaid")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("TEXT");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("Item");

                    b.HasIndex("UserId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("ShopsRUs.Domain.Entity.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserType")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("PhoneNumber", "Name")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "kfc road 1",
                            CreatedOn = new DateTime(2021, 3, 2, 3, 27, 27, 797, DateTimeKind.Local).AddTicks(8668),
                            DateOfBirth = new DateTime(1971, 3, 2, 3, 27, 27, 798, DateTimeKind.Local).AddTicks(965),
                            Email = "mckensie1@gmail.com",
                            Gender = "male",
                            IsActive = true,
                            Name = "William 1",
                            PhoneNumber = "08109502101",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserType = "Affiliate"
                        },
                        new
                        {
                            Id = 2L,
                            Address = "kfc road 2",
                            CreatedOn = new DateTime(2021, 3, 2, 3, 27, 27, 798, DateTimeKind.Local).AddTicks(2711),
                            DateOfBirth = new DateTime(1981, 3, 2, 3, 27, 27, 798, DateTimeKind.Local).AddTicks(2728),
                            Email = "mckensie2@gmail.com",
                            Gender = "male",
                            IsActive = true,
                            Name = "William 2",
                            PhoneNumber = "08109502101",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserType = "Customer"
                        },
                        new
                        {
                            Id = 3L,
                            Address = "kfc road 3",
                            CreatedOn = new DateTime(2018, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1991, 3, 2, 3, 27, 27, 798, DateTimeKind.Local).AddTicks(2743),
                            Email = "mckensie3@gmail.com",
                            Gender = "male",
                            IsActive = true,
                            Name = "William 3",
                            PhoneNumber = "08109502103",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserType = "Employee"
                        },
                        new
                        {
                            Id = 4L,
                            Address = "kfc road 4",
                            CreatedOn = new DateTime(2018, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1987, 3, 2, 3, 27, 27, 798, DateTimeKind.Local).AddTicks(2748),
                            Email = "mckensie4@gmail.com",
                            Gender = "female",
                            IsActive = true,
                            Name = "William 4",
                            PhoneNumber = "08109502104",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserType = "Customer"
                        },
                        new
                        {
                            Id = 5L,
                            Address = "kfc road 4",
                            CreatedOn = new DateTime(2020, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfBirth = new DateTime(1987, 3, 2, 3, 27, 27, 798, DateTimeKind.Local).AddTicks(2751),
                            Email = "mckensie5@gmail.com",
                            Gender = "female",
                            IsActive = true,
                            Name = "William 5",
                            PhoneNumber = "08109502105",
                            UpdatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UserType = "Customer"
                        });
                });

            modelBuilder.Entity("ShopsRUs.Domain.Entity.Customer", b =>
                {
                    b.HasOne("ShopsRUs.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ShopsRUs.Domain.Entity.Invoice", b =>
                {
                    b.HasOne("ShopsRUs.Domain.Entity.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopsRUs.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
